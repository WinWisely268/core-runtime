// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// StartPosition determines the start-position type on a subscription.
type StartPosition int32

const (
	StartPosition_NEW_ONLY  StartPosition = 0
	StartPosition_OFFSET    StartPosition = 1
	StartPosition_EARLIEST  StartPosition = 2
	StartPosition_LATEST    StartPosition = 3
	StartPosition_TIMESTAMP StartPosition = 4
)

var StartPosition_name = map[int32]string{
	0: "NEW_ONLY",
	1: "OFFSET",
	2: "EARLIEST",
	3: "LATEST",
	4: "TIMESTAMP",
}

var StartPosition_value = map[string]int32{
	"NEW_ONLY":  0,
	"OFFSET":    1,
	"EARLIEST":  2,
	"LATEST":    3,
	"TIMESTAMP": 4,
}

func (x StartPosition) String() string {
	return proto.EnumName(StartPosition_name, int32(x))
}

func (StartPosition) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

// AckPolicy controls the behavior of message acknowledgements.
type AckPolicy int32

const (
	AckPolicy_LEADER AckPolicy = 0
	AckPolicy_ALL    AckPolicy = 1
	AckPolicy_NONE   AckPolicy = 2
)

var AckPolicy_name = map[int32]string{
	0: "LEADER",
	1: "ALL",
	2: "NONE",
}

var AckPolicy_value = map[string]int32{
	"LEADER": 0,
	"ALL":    1,
	"NONE":   2,
}

func (x AckPolicy) String() string {
	return proto.EnumName(AckPolicy_name, int32(x))
}

func (AckPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

type StreamMetadata_Error int32

const (
	StreamMetadata_OK             StreamMetadata_Error = 0
	StreamMetadata_UNKNOWN_STREAM StreamMetadata_Error = 1
)

var StreamMetadata_Error_name = map[int32]string{
	0: "OK",
	1: "UNKNOWN_STREAM",
}

var StreamMetadata_Error_value = map[string]int32{
	"OK":             0,
	"UNKNOWN_STREAM": 1,
}

func (x StreamMetadata_Error) String() string {
	return proto.EnumName(StreamMetadata_Error_name, int32(x))
}

func (StreamMetadata_Error) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8, 0}
}

// CreateStreamRequest is sent to create a new stream.
type CreateStreamRequest struct {
	Subject              string   `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Group                string   `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	ReplicationFactor    int32    `protobuf:"varint,4,opt,name=replicationFactor,proto3" json:"replicationFactor,omitempty"`
	Partitions           int32    `protobuf:"varint,5,opt,name=partitions,proto3" json:"partitions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateStreamRequest) Reset()         { *m = CreateStreamRequest{} }
func (m *CreateStreamRequest) String() string { return proto.CompactTextString(m) }
func (*CreateStreamRequest) ProtoMessage()    {}
func (*CreateStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *CreateStreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateStreamRequest.Unmarshal(m, b)
}
func (m *CreateStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateStreamRequest.Marshal(b, m, deterministic)
}
func (m *CreateStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateStreamRequest.Merge(m, src)
}
func (m *CreateStreamRequest) XXX_Size() int {
	return xxx_messageInfo_CreateStreamRequest.Size(m)
}
func (m *CreateStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateStreamRequest proto.InternalMessageInfo

func (m *CreateStreamRequest) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *CreateStreamRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateStreamRequest) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *CreateStreamRequest) GetReplicationFactor() int32 {
	if m != nil {
		return m.ReplicationFactor
	}
	return 0
}

func (m *CreateStreamRequest) GetPartitions() int32 {
	if m != nil {
		return m.Partitions
	}
	return 0
}

// CreateStreamResponse is sent by server after creating a stream.
type CreateStreamResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateStreamResponse) Reset()         { *m = CreateStreamResponse{} }
func (m *CreateStreamResponse) String() string { return proto.CompactTextString(m) }
func (*CreateStreamResponse) ProtoMessage()    {}
func (*CreateStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *CreateStreamResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateStreamResponse.Unmarshal(m, b)
}
func (m *CreateStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateStreamResponse.Marshal(b, m, deterministic)
}
func (m *CreateStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateStreamResponse.Merge(m, src)
}
func (m *CreateStreamResponse) XXX_Size() int {
	return xxx_messageInfo_CreateStreamResponse.Size(m)
}
func (m *CreateStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateStreamResponse proto.InternalMessageInfo

// SubscribeRequest is sent to subscribe to a stream partition.
type SubscribeRequest struct {
	Stream               string        `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	Partition            int32         `protobuf:"varint,2,opt,name=partition,proto3" json:"partition,omitempty"`
	StartPosition        StartPosition `protobuf:"varint,3,opt,name=startPosition,proto3,enum=proto.StartPosition" json:"startPosition,omitempty"`
	StartOffset          int64         `protobuf:"varint,4,opt,name=startOffset,proto3" json:"startOffset,omitempty"`
	StartTimestamp       int64         `protobuf:"varint,5,opt,name=startTimestamp,proto3" json:"startTimestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRequest.Unmarshal(m, b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeRequest.Size(m)
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetStream() string {
	if m != nil {
		return m.Stream
	}
	return ""
}

func (m *SubscribeRequest) GetPartition() int32 {
	if m != nil {
		return m.Partition
	}
	return 0
}

func (m *SubscribeRequest) GetStartPosition() StartPosition {
	if m != nil {
		return m.StartPosition
	}
	return StartPosition_NEW_ONLY
}

func (m *SubscribeRequest) GetStartOffset() int64 {
	if m != nil {
		return m.StartOffset
	}
	return 0
}

func (m *SubscribeRequest) GetStartTimestamp() int64 {
	if m != nil {
		return m.StartTimestamp
	}
	return 0
}

// FetchMetadataRequest is sent to retrieve the latest cluster metadata.
type FetchMetadataRequest struct {
	Streams              []string `protobuf:"bytes,1,rep,name=streams,proto3" json:"streams,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchMetadataRequest) Reset()         { *m = FetchMetadataRequest{} }
func (m *FetchMetadataRequest) String() string { return proto.CompactTextString(m) }
func (*FetchMetadataRequest) ProtoMessage()    {}
func (*FetchMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

func (m *FetchMetadataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchMetadataRequest.Unmarshal(m, b)
}
func (m *FetchMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchMetadataRequest.Marshal(b, m, deterministic)
}
func (m *FetchMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchMetadataRequest.Merge(m, src)
}
func (m *FetchMetadataRequest) XXX_Size() int {
	return xxx_messageInfo_FetchMetadataRequest.Size(m)
}
func (m *FetchMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchMetadataRequest proto.InternalMessageInfo

func (m *FetchMetadataRequest) GetStreams() []string {
	if m != nil {
		return m.Streams
	}
	return nil
}

// FetchMetadataResponse contains the cluster metadata requested.
type FetchMetadataResponse struct {
	Brokers              []*Broker         `protobuf:"bytes,1,rep,name=brokers,proto3" json:"brokers,omitempty"`
	Metadata             []*StreamMetadata `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *FetchMetadataResponse) Reset()         { *m = FetchMetadataResponse{} }
func (m *FetchMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*FetchMetadataResponse) ProtoMessage()    {}
func (*FetchMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}

func (m *FetchMetadataResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchMetadataResponse.Unmarshal(m, b)
}
func (m *FetchMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchMetadataResponse.Marshal(b, m, deterministic)
}
func (m *FetchMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchMetadataResponse.Merge(m, src)
}
func (m *FetchMetadataResponse) XXX_Size() int {
	return xxx_messageInfo_FetchMetadataResponse.Size(m)
}
func (m *FetchMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchMetadataResponse proto.InternalMessageInfo

func (m *FetchMetadataResponse) GetBrokers() []*Broker {
	if m != nil {
		return m.Brokers
	}
	return nil
}

func (m *FetchMetadataResponse) GetMetadata() []*StreamMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// PublishRequest is sent to publish a new message.
type PublishRequest struct {
	Key                  []byte            `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte            `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Stream               string            `protobuf:"bytes,3,opt,name=stream,proto3" json:"stream,omitempty"`
	Partition            int32             `protobuf:"varint,4,opt,name=partition,proto3" json:"partition,omitempty"`
	Subject              string            `protobuf:"bytes,5,opt,name=subject,proto3" json:"subject,omitempty"`
	ReplySubject         string            `protobuf:"bytes,6,opt,name=replySubject,proto3" json:"replySubject,omitempty"`
	Headers              map[string][]byte `protobuf:"bytes,7,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AckInbox             string            `protobuf:"bytes,8,opt,name=ackInbox,proto3" json:"ackInbox,omitempty"`
	CorrelationId        string            `protobuf:"bytes,9,opt,name=correlationId,proto3" json:"correlationId,omitempty"`
	AckPolicy            AckPolicy         `protobuf:"varint,10,opt,name=ackPolicy,proto3,enum=proto.AckPolicy" json:"ackPolicy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PublishRequest) Reset()         { *m = PublishRequest{} }
func (m *PublishRequest) String() string { return proto.CompactTextString(m) }
func (*PublishRequest) ProtoMessage()    {}
func (*PublishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}

func (m *PublishRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishRequest.Unmarshal(m, b)
}
func (m *PublishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishRequest.Marshal(b, m, deterministic)
}
func (m *PublishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishRequest.Merge(m, src)
}
func (m *PublishRequest) XXX_Size() int {
	return xxx_messageInfo_PublishRequest.Size(m)
}
func (m *PublishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishRequest proto.InternalMessageInfo

func (m *PublishRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *PublishRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *PublishRequest) GetStream() string {
	if m != nil {
		return m.Stream
	}
	return ""
}

func (m *PublishRequest) GetPartition() int32 {
	if m != nil {
		return m.Partition
	}
	return 0
}

func (m *PublishRequest) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *PublishRequest) GetReplySubject() string {
	if m != nil {
		return m.ReplySubject
	}
	return ""
}

func (m *PublishRequest) GetHeaders() map[string][]byte {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *PublishRequest) GetAckInbox() string {
	if m != nil {
		return m.AckInbox
	}
	return ""
}

func (m *PublishRequest) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

func (m *PublishRequest) GetAckPolicy() AckPolicy {
	if m != nil {
		return m.AckPolicy
	}
	return AckPolicy_LEADER
}

// PublishResponse is sent by the server after publishing a message.
type PublishResponse struct {
	Ack                  *Ack     `protobuf:"bytes,1,opt,name=ack,proto3" json:"ack,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishResponse) Reset()         { *m = PublishResponse{} }
func (m *PublishResponse) String() string { return proto.CompactTextString(m) }
func (*PublishResponse) ProtoMessage()    {}
func (*PublishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}

func (m *PublishResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishResponse.Unmarshal(m, b)
}
func (m *PublishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishResponse.Marshal(b, m, deterministic)
}
func (m *PublishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishResponse.Merge(m, src)
}
func (m *PublishResponse) XXX_Size() int {
	return xxx_messageInfo_PublishResponse.Size(m)
}
func (m *PublishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishResponse proto.InternalMessageInfo

func (m *PublishResponse) GetAck() *Ack {
	if m != nil {
		return m.Ack
	}
	return nil
}

// Broker contains information for a Liftbridge broker.
type Broker struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Host                 string   `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port                 int32    `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Broker) Reset()         { *m = Broker{} }
func (m *Broker) String() string { return proto.CompactTextString(m) }
func (*Broker) ProtoMessage()    {}
func (*Broker) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}

func (m *Broker) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Broker.Unmarshal(m, b)
}
func (m *Broker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Broker.Marshal(b, m, deterministic)
}
func (m *Broker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Broker.Merge(m, src)
}
func (m *Broker) XXX_Size() int {
	return xxx_messageInfo_Broker.Size(m)
}
func (m *Broker) XXX_DiscardUnknown() {
	xxx_messageInfo_Broker.DiscardUnknown(m)
}

var xxx_messageInfo_Broker proto.InternalMessageInfo

func (m *Broker) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Broker) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Broker) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// StreamMetadata contains information for a stream.
type StreamMetadata struct {
	Name                 string                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Subject              string                       `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	Error                StreamMetadata_Error         `protobuf:"varint,3,opt,name=error,proto3,enum=proto.StreamMetadata_Error" json:"error,omitempty"`
	Partitions           map[int32]*PartitionMetadata `protobuf:"bytes,4,rep,name=partitions,proto3" json:"partitions,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *StreamMetadata) Reset()         { *m = StreamMetadata{} }
func (m *StreamMetadata) String() string { return proto.CompactTextString(m) }
func (*StreamMetadata) ProtoMessage()    {}
func (*StreamMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}

func (m *StreamMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamMetadata.Unmarshal(m, b)
}
func (m *StreamMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamMetadata.Marshal(b, m, deterministic)
}
func (m *StreamMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamMetadata.Merge(m, src)
}
func (m *StreamMetadata) XXX_Size() int {
	return xxx_messageInfo_StreamMetadata.Size(m)
}
func (m *StreamMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_StreamMetadata proto.InternalMessageInfo

func (m *StreamMetadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StreamMetadata) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *StreamMetadata) GetError() StreamMetadata_Error {
	if m != nil {
		return m.Error
	}
	return StreamMetadata_OK
}

func (m *StreamMetadata) GetPartitions() map[int32]*PartitionMetadata {
	if m != nil {
		return m.Partitions
	}
	return nil
}

// PartitionMetadata contains information for a stream partition.
type PartitionMetadata struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Leader               string   `protobuf:"bytes,2,opt,name=leader,proto3" json:"leader,omitempty"`
	Replicas             []string `protobuf:"bytes,3,rep,name=replicas,proto3" json:"replicas,omitempty"`
	Isr                  []string `protobuf:"bytes,4,rep,name=isr,proto3" json:"isr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PartitionMetadata) Reset()         { *m = PartitionMetadata{} }
func (m *PartitionMetadata) String() string { return proto.CompactTextString(m) }
func (*PartitionMetadata) ProtoMessage()    {}
func (*PartitionMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}

func (m *PartitionMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PartitionMetadata.Unmarshal(m, b)
}
func (m *PartitionMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PartitionMetadata.Marshal(b, m, deterministic)
}
func (m *PartitionMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionMetadata.Merge(m, src)
}
func (m *PartitionMetadata) XXX_Size() int {
	return xxx_messageInfo_PartitionMetadata.Size(m)
}
func (m *PartitionMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionMetadata proto.InternalMessageInfo

func (m *PartitionMetadata) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PartitionMetadata) GetLeader() string {
	if m != nil {
		return m.Leader
	}
	return ""
}

func (m *PartitionMetadata) GetReplicas() []string {
	if m != nil {
		return m.Replicas
	}
	return nil
}

func (m *PartitionMetadata) GetIsr() []string {
	if m != nil {
		return m.Isr
	}
	return nil
}

// Message represents a message from a stream.
type Message struct {
	Offset               int64             `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Key                  []byte            `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte            `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp            int64             `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Stream               string            `protobuf:"bytes,5,opt,name=stream,proto3" json:"stream,omitempty"`
	Partition            int32             `protobuf:"varint,6,opt,name=partition,proto3" json:"partition,omitempty"`
	Subject              string            `protobuf:"bytes,7,opt,name=subject,proto3" json:"subject,omitempty"`
	ReplySubject         string            `protobuf:"bytes,8,opt,name=replySubject,proto3" json:"replySubject,omitempty"`
	Headers              map[string][]byte `protobuf:"bytes,9,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AckInbox             string            `protobuf:"bytes,10,opt,name=ackInbox,proto3" json:"ackInbox,omitempty"`
	CorrelationId        string            `protobuf:"bytes,11,opt,name=correlationId,proto3" json:"correlationId,omitempty"`
	AckPolicy            AckPolicy         `protobuf:"varint,12,opt,name=ackPolicy,proto3,enum=proto.AckPolicy" json:"ackPolicy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Message) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Message) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Message) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Message) GetStream() string {
	if m != nil {
		return m.Stream
	}
	return ""
}

func (m *Message) GetPartition() int32 {
	if m != nil {
		return m.Partition
	}
	return 0
}

func (m *Message) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *Message) GetReplySubject() string {
	if m != nil {
		return m.ReplySubject
	}
	return ""
}

func (m *Message) GetHeaders() map[string][]byte {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *Message) GetAckInbox() string {
	if m != nil {
		return m.AckInbox
	}
	return ""
}

func (m *Message) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

func (m *Message) GetAckPolicy() AckPolicy {
	if m != nil {
		return m.AckPolicy
	}
	return AckPolicy_LEADER
}

// Ack represents an acknowledgement that a message was committed to a stream
// partition.
type Ack struct {
	Stream               string    `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	PartitionSubject     string    `protobuf:"bytes,2,opt,name=partitionSubject,proto3" json:"partitionSubject,omitempty"`
	MsgSubject           string    `protobuf:"bytes,3,opt,name=msgSubject,proto3" json:"msgSubject,omitempty"`
	Offset               int64     `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	AckInbox             string    `protobuf:"bytes,5,opt,name=ackInbox,proto3" json:"ackInbox,omitempty"`
	CorrelationId        string    `protobuf:"bytes,6,opt,name=correlationId,proto3" json:"correlationId,omitempty"`
	AckPolicy            AckPolicy `protobuf:"varint,7,opt,name=ackPolicy,proto3,enum=proto.AckPolicy" json:"ackPolicy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}

func (m *Ack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ack.Unmarshal(m, b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
}
func (m *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(m, src)
}
func (m *Ack) XXX_Size() int {
	return xxx_messageInfo_Ack.Size(m)
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

func (m *Ack) GetStream() string {
	if m != nil {
		return m.Stream
	}
	return ""
}

func (m *Ack) GetPartitionSubject() string {
	if m != nil {
		return m.PartitionSubject
	}
	return ""
}

func (m *Ack) GetMsgSubject() string {
	if m != nil {
		return m.MsgSubject
	}
	return ""
}

func (m *Ack) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Ack) GetAckInbox() string {
	if m != nil {
		return m.AckInbox
	}
	return ""
}

func (m *Ack) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

func (m *Ack) GetAckPolicy() AckPolicy {
	if m != nil {
		return m.AckPolicy
	}
	return AckPolicy_LEADER
}

func init() {
	proto.RegisterEnum("proto.StartPosition", StartPosition_name, StartPosition_value)
	proto.RegisterEnum("proto.AckPolicy", AckPolicy_name, AckPolicy_value)
	proto.RegisterEnum("proto.StreamMetadata_Error", StreamMetadata_Error_name, StreamMetadata_Error_value)
	proto.RegisterType((*CreateStreamRequest)(nil), "proto.CreateStreamRequest")
	proto.RegisterType((*CreateStreamResponse)(nil), "proto.CreateStreamResponse")
	proto.RegisterType((*SubscribeRequest)(nil), "proto.SubscribeRequest")
	proto.RegisterType((*FetchMetadataRequest)(nil), "proto.FetchMetadataRequest")
	proto.RegisterType((*FetchMetadataResponse)(nil), "proto.FetchMetadataResponse")
	proto.RegisterType((*PublishRequest)(nil), "proto.PublishRequest")
	proto.RegisterMapType((map[string][]byte)(nil), "proto.PublishRequest.HeadersEntry")
	proto.RegisterType((*PublishResponse)(nil), "proto.PublishResponse")
	proto.RegisterType((*Broker)(nil), "proto.Broker")
	proto.RegisterType((*StreamMetadata)(nil), "proto.StreamMetadata")
	proto.RegisterMapType((map[int32]*PartitionMetadata)(nil), "proto.StreamMetadata.PartitionsEntry")
	proto.RegisterType((*PartitionMetadata)(nil), "proto.PartitionMetadata")
	proto.RegisterType((*Message)(nil), "proto.Message")
	proto.RegisterMapType((map[string][]byte)(nil), "proto.Message.HeadersEntry")
	proto.RegisterType((*Ack)(nil), "proto.Ack")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 1027 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x8e, 0xed, 0xd8, 0x89, 0x4f, 0x7e, 0xd6, 0x3b, 0xdb, 0x16, 0x2b, 0x5b, 0xa1, 0xca, 0x2c,
	0x62, 0x15, 0xa1, 0xd0, 0x0d, 0x42, 0x5a, 0x55, 0x5c, 0x90, 0x82, 0x2b, 0xa2, 0xcd, 0x9f, 0x9c,
	0xa0, 0x8a, 0xab, 0xca, 0x71, 0xa6, 0xad, 0xc9, 0x8f, 0xc3, 0xcc, 0x04, 0xd1, 0xf7, 0xe0, 0x82,
	0x37, 0xe0, 0x0d, 0x78, 0x06, 0x9e, 0x80, 0x57, 0xe1, 0x16, 0xcd, 0xf8, 0x27, 0xe3, 0x34, 0x6d,
	0xb8, 0xe1, 0xca, 0x33, 0xdf, 0x39, 0xc7, 0x73, 0x7e, 0xbe, 0x73, 0x66, 0xc0, 0xf4, 0xd7, 0x61,
	0x6b, 0x4d, 0x22, 0x16, 0x21, 0x5d, 0x7c, 0x9c, 0x3f, 0x14, 0x78, 0xf5, 0x2d, 0xc1, 0x3e, 0xc3,
	0x63, 0x46, 0xb0, 0xbf, 0xf4, 0xf0, 0xcf, 0x1b, 0x4c, 0x19, 0xb2, 0xa1, 0x44, 0x37, 0xd3, 0x9f,
	0x70, 0xc0, 0x6c, 0xe5, 0x4c, 0x79, 0x6b, 0x7a, 0xe9, 0x16, 0x21, 0x28, 0xae, 0xfc, 0x25, 0xb6,
	0x55, 0x01, 0x8b, 0x35, 0x3a, 0x02, 0xfd, 0x8e, 0x44, 0x9b, 0xb5, 0xad, 0x09, 0x30, 0xde, 0xa0,
	0xcf, 0xe1, 0x25, 0xc1, 0xeb, 0x45, 0x18, 0xf8, 0x2c, 0x8c, 0x56, 0x57, 0x7e, 0xc0, 0x22, 0x62,
	0x17, 0xcf, 0x94, 0xb7, 0xba, 0xf7, 0x58, 0x80, 0x3e, 0x06, 0x58, 0xfb, 0x84, 0x85, 0x1c, 0xa2,
	0xb6, 0x2e, 0xd4, 0x24, 0xc4, 0x39, 0x81, 0xa3, 0xbc, 0xa3, 0x74, 0x1d, 0xad, 0x28, 0x76, 0xfe,
	0x56, 0xc0, 0x1a, 0x6f, 0xa6, 0x34, 0x20, 0xe1, 0x14, 0xa7, 0xee, 0x9f, 0x80, 0x41, 0x85, 0x5a,
	0xe2, 0x7d, 0xb2, 0x43, 0xa7, 0x60, 0x66, 0xbf, 0x14, 0x11, 0xe8, 0xde, 0x16, 0x40, 0x17, 0x50,
	0xa3, 0xcc, 0x27, 0x6c, 0x14, 0xd1, 0x58, 0x83, 0x87, 0x53, 0x6f, 0x1f, 0xc5, 0x29, 0x6b, 0x8d,
	0x65, 0x99, 0x97, 0x57, 0x45, 0x6f, 0xa0, 0x22, 0x80, 0xe1, 0xed, 0x2d, 0xc5, 0x4c, 0x84, 0xa9,
	0x5d, 0xaa, 0xe7, 0x8a, 0x27, 0xc3, 0xa8, 0x09, 0x75, 0xb1, 0x9d, 0x84, 0x4b, 0x4c, 0x99, 0xbf,
	0x5c, 0x8b, 0x40, 0x63, 0xc5, 0x1d, 0x89, 0x73, 0x0e, 0x47, 0x57, 0x98, 0x05, 0xf7, 0x7d, 0xcc,
	0xfc, 0x99, 0xcf, 0x7c, 0xb9, 0x34, 0x22, 0x1a, 0x6a, 0x2b, 0x67, 0x9a, 0x28, 0x4d, 0xbc, 0x75,
	0x28, 0x1c, 0xef, 0x58, 0xc4, 0x39, 0x42, 0x9f, 0x41, 0x69, 0x4a, 0xa2, 0x39, 0x26, 0xb1, 0x49,
	0xa5, 0x5d, 0x4b, 0x42, 0xba, 0x14, 0xa8, 0x97, 0x4a, 0xd1, 0x3b, 0x28, 0x2f, 0x13, 0x63, 0x5b,
	0x15, 0x9a, 0xc7, 0x59, 0xf0, 0xfc, 0x8c, 0xec, 0xcf, 0x99, 0x9a, 0xf3, 0xbb, 0x06, 0xf5, 0xd1,
	0x66, 0xba, 0x08, 0xe9, 0x7d, 0xea, 0xa1, 0x05, 0xda, 0x1c, 0x3f, 0x88, 0xd4, 0x57, 0x3d, 0xbe,
	0xe4, 0x04, 0xf9, 0xc5, 0x5f, 0x6c, 0x62, 0xd6, 0x54, 0xbd, 0x78, 0x23, 0x55, 0x49, 0x7b, 0xba,
	0x4a, 0xc5, 0xdd, 0x2a, 0x49, 0xd4, 0xd4, 0xf3, 0xd4, 0x74, 0xa0, 0xca, 0x79, 0xf5, 0x30, 0x4e,
	0xc4, 0x86, 0x10, 0xe7, 0x30, 0xf4, 0x35, 0x94, 0xee, 0xb1, 0x3f, 0xe3, 0xa9, 0x28, 0x89, 0x00,
	0x9d, 0x24, 0xc0, 0x7c, 0x0c, 0xad, 0xef, 0x63, 0x25, 0x77, 0xc5, 0xc8, 0x83, 0x97, 0x9a, 0xa0,
	0x06, 0x94, 0xfd, 0x60, 0xde, 0x5d, 0x4d, 0xa3, 0x5f, 0xed, 0xb2, 0xf8, 0x7b, 0xb6, 0x47, 0x6f,
	0xa0, 0x16, 0x44, 0x84, 0xe0, 0x85, 0x60, 0x75, 0x77, 0x66, 0x9b, 0x42, 0x21, 0x0f, 0xa2, 0x16,
	0x98, 0x7e, 0x30, 0x1f, 0x45, 0x8b, 0x30, 0x78, 0xb0, 0x41, 0xf0, 0xcb, 0x4a, 0x3c, 0xe8, 0xa4,
	0xb8, 0xb7, 0x55, 0x69, 0x5c, 0x40, 0x55, 0x76, 0x45, 0xce, 0xad, 0xf9, 0x4c, 0x6e, 0x2f, 0xd4,
	0xf7, 0x8a, 0xf3, 0x05, 0xbc, 0xc8, 0xa2, 0x4a, 0x98, 0x70, 0x0a, 0x9a, 0x1f, 0xcc, 0x85, 0x79,
	0xa5, 0x0d, 0xdb, 0x83, 0x3d, 0x0e, 0x3b, 0xdf, 0x80, 0x11, 0x33, 0x02, 0xd5, 0x41, 0x0d, 0x67,
	0xc9, 0x29, 0x6a, 0x38, 0xe3, 0x5d, 0x7f, 0x1f, 0x51, 0x96, 0x76, 0x3d, 0x5f, 0x73, 0x6c, 0x1d,
	0x11, 0x26, 0x8a, 0xa7, 0x7b, 0x62, 0xed, 0xfc, 0xa9, 0x42, 0x3d, 0x4f, 0x95, 0x6c, 0x60, 0x28,
	0xd2, 0xc0, 0x90, 0x6a, 0xa8, 0xe6, 0x6b, 0xf8, 0x0e, 0x74, 0x4c, 0x48, 0x44, 0x92, 0xde, 0x7b,
	0xbd, 0x97, 0x7e, 0x2d, 0x97, 0xab, 0x78, 0xb1, 0x26, 0x72, 0x73, 0x93, 0xa3, 0x28, 0xaa, 0xfa,
	0xe9, 0x7e, 0xbb, 0x51, 0xa6, 0x17, 0x17, 0x56, 0x32, 0x6c, 0x5c, 0xc3, 0x8b, 0x1d, 0xb1, 0x9c,
	0x6c, 0x3d, 0x4e, 0x76, 0x4b, 0x4e, 0x76, 0xa5, 0x6d, 0xa7, 0xe4, 0x49, 0x0d, 0xb3, 0x06, 0x91,
	0xca, 0xf0, 0x09, 0xe8, 0xc2, 0x5f, 0x64, 0x80, 0x3a, 0xfc, 0x60, 0x15, 0x10, 0x82, 0xfa, 0x0f,
	0x83, 0x0f, 0x83, 0xe1, 0xf5, 0xe0, 0x66, 0x3c, 0xf1, 0xdc, 0x4e, 0xdf, 0x52, 0x9c, 0x10, 0x5e,
	0x3e, 0xfa, 0x89, 0x54, 0x05, 0x5d, 0x54, 0xe1, 0x04, 0x8c, 0x85, 0x20, 0x43, 0x92, 0xb5, 0x64,
	0xc7, 0x69, 0x99, 0x0c, 0x54, 0x6a, 0x6b, 0x62, 0x26, 0x64, 0x7b, 0x1e, 0x43, 0x48, 0x89, 0x48,
	0x8b, 0xe9, 0xf1, 0xa5, 0xf3, 0x97, 0x06, 0xa5, 0x3e, 0xa6, 0xd4, 0xbf, 0xc3, 0xa8, 0x01, 0x46,
	0x14, 0x4f, 0x2c, 0x25, 0x1b, 0x44, 0x09, 0x92, 0x46, 0xaf, 0xee, 0x69, 0x63, 0x4d, 0x6e, 0xe3,
	0x33, 0x30, 0x59, 0x36, 0xcf, 0xb6, 0x83, 0x6f, 0x0b, 0x4a, 0x8d, 0xae, 0x3f, 0xdd, 0xe8, 0xc6,
	0x33, 0x8d, 0x5e, 0x7a, 0xbe, 0xd1, 0xcb, 0x7b, 0x1a, 0xfd, 0xab, 0x6d, 0xa3, 0x9b, 0x82, 0x12,
	0x29, 0x95, 0x92, 0xd0, 0xff, 0x43, 0x87, 0xc3, 0xa1, 0x0e, 0xaf, 0x1c, 0xec, 0xf0, 0xea, 0xff,
	0xdb, 0xe1, 0xff, 0x28, 0xa0, 0x75, 0x82, 0xf9, 0x93, 0xf7, 0x5d, 0x13, 0xac, 0x2c, 0x9f, 0xe3,
	0x5c, 0xc3, 0x3d, 0xc2, 0xf9, 0x05, 0xbc, 0xa4, 0x77, 0xa9, 0x56, 0x3c, 0x91, 0x25, 0x44, 0xa2,
	0x4a, 0xf1, 0x11, 0x55, 0xe4, 0xac, 0xe9, 0x87, 0xb2, 0x66, 0x1c, 0xcc, 0x5a, 0xe9, 0x60, 0xd6,
	0x9a, 0x1e, 0xd4, 0x72, 0xf7, 0x31, 0xaa, 0x42, 0x79, 0xe0, 0x5e, 0xdf, 0x0c, 0x07, 0xbd, 0x1f,
	0xad, 0x02, 0x02, 0x30, 0x86, 0x57, 0x57, 0x63, 0x77, 0x62, 0x29, 0x5c, 0xe2, 0x76, 0xbc, 0x5e,
	0xd7, 0x1d, 0x4f, 0x2c, 0x95, 0x4b, 0x7a, 0x9d, 0x09, 0x5f, 0x6b, 0xa8, 0x06, 0xe6, 0xa4, 0xdb,
	0x77, 0xc7, 0x93, 0x4e, 0x7f, 0x64, 0x15, 0x9b, 0x4d, 0x30, 0xb3, 0xb3, 0x84, 0x9e, 0xdb, 0xf9,
	0xce, 0xf5, 0xac, 0x02, 0x2a, 0x81, 0xd6, 0xe9, 0xf5, 0x2c, 0x05, 0x95, 0xa1, 0x38, 0x18, 0x0e,
	0x5c, 0x4b, 0x6d, 0xff, 0xa6, 0x82, 0xd6, 0x19, 0x75, 0x51, 0x17, 0xaa, 0xf2, 0xb3, 0x04, 0x35,
	0x12, 0xa7, 0xf7, 0x3c, 0xaa, 0x1a, 0xaf, 0xf7, 0xca, 0x92, 0x77, 0x4c, 0x01, 0xbd, 0x07, 0x33,
	0x7b, 0xc8, 0xa0, 0x8f, 0xd2, 0x01, 0xb6, 0xf3, 0xb4, 0x69, 0xd4, 0xf3, 0x34, 0x76, 0x0a, 0xe7,
	0x0a, 0xea, 0x41, 0x2d, 0x77, 0xf1, 0xa3, 0xf4, 0xa4, 0x7d, 0x0f, 0x88, 0xc6, 0xe9, 0x7e, 0x61,
	0xe6, 0xc7, 0x05, 0x94, 0x92, 0x6b, 0x03, 0x1d, 0xef, 0xbd, 0x1c, 0x1b, 0x27, 0xbb, 0x70, 0x6a,
	0x7b, 0x79, 0x0c, 0xaf, 0xc2, 0xa8, 0xb5, 0x08, 0x6f, 0xd9, 0x94, 0x84, 0xb3, 0x3b, 0x1c, 0x2b,
	0x4e, 0x0d, 0xf1, 0xf9, 0xf2, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x68, 0x21, 0x74, 0x81,
	0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type APIClient interface {
	// CreateStream creates a new stream attached to a NATS subject. It returns
	// an AlreadyExists status code if a stream with the given subject and name
	// already exists.
	CreateStream(ctx context.Context, in *CreateStreamRequest, opts ...grpc.CallOption) (*CreateStreamResponse, error)
	// Subscribe creates an ephemeral subscription for the given stream. It
	// begins to receive messages starting at the given offset and waits for
	// new messages when it reaches the end of the stream. Use the request
	// context to close the subscription.
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (API_SubscribeClient, error)
	// FetchMetadata retrieves the latest cluster metadata, including stream
	// broker information.
	FetchMetadata(ctx context.Context, in *FetchMetadataRequest, opts ...grpc.CallOption) (*FetchMetadataResponse, error)
	// Publish a new message to a subject. If the AckPolicy is not NONE and a
	// deadline is provided, this will synchronously block until the ack is
	// received. If the ack is not received in time, a DeadlineExceeded status
	// code is returned.
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
}

type aPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIClient(cc grpc.ClientConnInterface) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) CreateStream(ctx context.Context, in *CreateStreamRequest, opts ...grpc.CallOption) (*CreateStreamResponse, error) {
	out := new(CreateStreamResponse)
	err := c.cc.Invoke(ctx, "/proto.API/CreateStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (API_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[0], "/proto.API/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPISubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_SubscribeClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type aPISubscribeClient struct {
	grpc.ClientStream
}

func (x *aPISubscribeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) FetchMetadata(ctx context.Context, in *FetchMetadataRequest, opts ...grpc.CallOption) (*FetchMetadataResponse, error) {
	out := new(FetchMetadataResponse)
	err := c.cc.Invoke(ctx, "/proto.API/FetchMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/proto.API/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
type APIServer interface {
	// CreateStream creates a new stream attached to a NATS subject. It returns
	// an AlreadyExists status code if a stream with the given subject and name
	// already exists.
	CreateStream(context.Context, *CreateStreamRequest) (*CreateStreamResponse, error)
	// Subscribe creates an ephemeral subscription for the given stream. It
	// begins to receive messages starting at the given offset and waits for
	// new messages when it reaches the end of the stream. Use the request
	// context to close the subscription.
	Subscribe(*SubscribeRequest, API_SubscribeServer) error
	// FetchMetadata retrieves the latest cluster metadata, including stream
	// broker information.
	FetchMetadata(context.Context, *FetchMetadataRequest) (*FetchMetadataResponse, error)
	// Publish a new message to a subject. If the AckPolicy is not NONE and a
	// deadline is provided, this will synchronously block until the ack is
	// received. If the ack is not received in time, a DeadlineExceeded status
	// code is returned.
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
}

// UnimplementedAPIServer can be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (*UnimplementedAPIServer) CreateStream(ctx context.Context, req *CreateStreamRequest) (*CreateStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStream not implemented")
}
func (*UnimplementedAPIServer) Subscribe(req *SubscribeRequest, srv API_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedAPIServer) FetchMetadata(ctx context.Context, req *FetchMetadataRequest) (*FetchMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchMetadata not implemented")
}
func (*UnimplementedAPIServer) Publish(ctx context.Context, req *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_CreateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/CreateStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateStream(ctx, req.(*CreateStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).Subscribe(m, &aPISubscribeServer{stream})
}

type API_SubscribeServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type aPISubscribeServer struct {
	grpc.ServerStream
}

func (x *aPISubscribeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _API_FetchMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).FetchMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/FetchMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).FetchMetadata(ctx, req.(*FetchMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStream",
			Handler:    _API_CreateStream_Handler,
		},
		{
			MethodName: "FetchMetadata",
			Handler:    _API_FetchMetadata_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _API_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _API_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
