# includes
BOILERPLATE_FSPATH=../../boilerplate

include $(BOILERPLATE_FSPATH)/tool/tools.mk
include $(BOILERPLATE_FSPATH)/core/go.mk


#override LIB_BIN_NAME=protofig
override GO_FSPATH:=${GOPATH}/bin/protofig
SUFFIX ?= $(shell git config user.name)

PHONY: help

this-build: proto
	${MAKE} go-build

baseproto:
	protoc -I api/ \
		-I ${GOPATH}/src \
		-I ${GOPATH}/src/github.com/envoyproxy/protoc-gen-validate \
		--go_out=":generated/go" \
		--dart_out=":generated/dart" \
		--validate_out="lang=go:generated/go/" \
		api/baseproto.proto

settingsproto:
	protoc -I api/ \
		-I ${GOPATH}/src \
		-I ${GOPATH}/src/github.com/envoyproxy/protoc-gen-validate \
		--go_out=":generated/go" \
		--dart_out=":generated/dart" \
		--validate_out="lang=go:generated/go/" \
		api/settings.proto

## Generate protobuf golang & dart code
proto: clean-proto baseproto
	$(MAKE) settingsproto
	protoc -I api/ \
		-I ${GOPATH}/src \
		-I ${GOPATH}/src/github.com/envoyproxy/protoc-gen-validate \
		--go_out=":generated/go/" \
		--dart_out=":generated/dart/" \
		--validate_out="lang=go:generated/go/" \
		--configdef_out=output_format=go,suffix=$(SUFFIX):"generated/go" \
		--configdef_out=output_format=dart,suffix=$(SUFFIX):"generated/dart" \
		--configdef_out=output_format=json,suffix=$(SUFFIX):"generated/" \
		api/config.proto

clean-proto:
	rm -rf generated/go/*
	rm -rf generated/dart/*
	rm -rf generated/*.json

## Test protofig output in output directory using supplied test.json
test-json:
	mkdir -p ./output
	go run main.go -f ./test.json -o ./output -u $(SUFFIX)
