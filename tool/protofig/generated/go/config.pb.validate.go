// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: config.proto

package config

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _config_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on MinioComponent with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *MinioComponent) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMinioAccesskey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MinioComponentValidationError{
				field:  "MinioAccesskey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMinioSecretkey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MinioComponentValidationError{
				field:  "MinioSecretkey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// MinioComponentValidationError is the validation error returned by
// MinioComponent.Validate if the designated constraints aren't met.
type MinioComponentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MinioComponentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MinioComponentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MinioComponentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MinioComponentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MinioComponentValidationError) ErrorName() string { return "MinioComponentValidationError" }

// Error satisfies the builtin error interface
func (e MinioComponentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMinioComponent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MinioComponentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MinioComponentValidationError{}

// Validate checks the field values on MaintemplateComponent with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MaintemplateComponent) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMinioAccesskey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MaintemplateComponentValidationError{
				field:  "MinioAccesskey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMinioSecretkey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MaintemplateComponentValidationError{
				field:  "MinioSecretkey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMinioLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MaintemplateComponentValidationError{
				field:  "MinioLocation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMinioTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MaintemplateComponentValidationError{
				field:  "MinioTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMinioSsl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MaintemplateComponentValidationError{
				field:  "MinioSsl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMinioEnckey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MaintemplateComponentValidationError{
				field:  "MinioEnckey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMinioEndpoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MaintemplateComponentValidationError{
				field:  "MinioEndpoint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// MaintemplateComponentValidationError is the validation error returned by
// MaintemplateComponent.Validate if the designated constraints aren't met.
type MaintemplateComponentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaintemplateComponentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaintemplateComponentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaintemplateComponentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaintemplateComponentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaintemplateComponentValidationError) ErrorName() string {
	return "MaintemplateComponentValidationError"
}

// Error satisfies the builtin error interface
func (e MaintemplateComponentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaintemplateComponent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaintemplateComponentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaintemplateComponentValidationError{}

// Validate checks the field values on GcpComponent with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GcpComponent) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetGcpUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GcpComponentValidationError{
				field:  "GcpUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGcpProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GcpComponentValidationError{
				field:  "GcpProject",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGkeCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GcpComponentValidationError{
				field:  "GkeCluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGkeZone()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GcpComponentValidationError{
				field:  "GkeZone",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGkeEmail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GcpComponentValidationError{
				field:  "GkeEmail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GcpComponentValidationError is the validation error returned by
// GcpComponent.Validate if the designated constraints aren't met.
type GcpComponentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GcpComponentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GcpComponentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GcpComponentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GcpComponentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GcpComponentValidationError) ErrorName() string { return "GcpComponentValidationError" }

// Error satisfies the builtin error interface
func (e GcpComponentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGcpComponent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GcpComponentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GcpComponentValidationError{}

// Validate checks the field values on JwtComponent with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *JwtComponent) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPrivateKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JwtComponentValidationError{
				field:  "PrivateKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPublicKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JwtComponentValidationError{
				field:  "PublicKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// JwtComponentValidationError is the validation error returned by
// JwtComponent.Validate if the designated constraints aren't met.
type JwtComponentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JwtComponentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JwtComponentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JwtComponentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JwtComponentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JwtComponentValidationError) ErrorName() string { return "JwtComponentValidationError" }

// Error satisfies the builtin error interface
func (e JwtComponentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJwtComponent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JwtComponentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JwtComponentValidationError{}

// Validate checks the field values on WorkflowComponent with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *WorkflowComponent) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetGithubSha()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowComponentValidationError{
				field:  "GithubSha",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGithubRef()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowComponentValidationError{
				field:  "GithubRef",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowComponentValidationError{
				field:  "Project",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRegistryHostname()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowComponentValidationError{
				field:  "RegistryHostname",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUrl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowComponentValidationError{
				field:  "Url",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLocales()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowComponentValidationError{
				field:  "Locales",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFlutterChannel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowComponentValidationError{
				field:  "FlutterChannel",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetReleaseChannel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowComponentValidationError{
				field:  "ReleaseChannel",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// WorkflowComponentValidationError is the validation error returned by
// WorkflowComponent.Validate if the designated constraints aren't met.
type WorkflowComponentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowComponentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowComponentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowComponentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowComponentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowComponentValidationError) ErrorName() string {
	return "WorkflowComponentValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowComponentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowComponent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowComponentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowComponentValidationError{}
