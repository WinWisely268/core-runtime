// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: settings.proto

package config

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _settings_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ProtoModuleConfig with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ProtoModuleConfig) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ModuleID

	for key, val := range m.GetConfigs() {
		_ = val

		// no validation rules for Configs[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProtoModuleConfigValidationError{
					field:  fmt.Sprintf("Configs[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ProtoModuleConfigValidationError is the validation error returned by
// ProtoModuleConfig.Validate if the designated constraints aren't met.
type ProtoModuleConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProtoModuleConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProtoModuleConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProtoModuleConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProtoModuleConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProtoModuleConfigValidationError) ErrorName() string {
	return "ProtoModuleConfigValidationError"
}

// Error satisfies the builtin error interface
func (e ProtoModuleConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProtoModuleConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProtoModuleConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProtoModuleConfigValidationError{}
